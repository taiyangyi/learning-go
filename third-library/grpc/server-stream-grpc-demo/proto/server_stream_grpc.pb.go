// 指定 protoc 版本

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: server_stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamServer_Route_FullMethodName     = "/StreamServer/Route"
	StreamServer_ListValue_FullMethodName = "/StreamServer/ListValue"
)

// StreamServerClient is the client API for StreamServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义服务方法
// 服务端流式 RPC，只要在响应数据前添加 stream 即可
type StreamServerClient interface {
	Route(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	// 服务端流式 rpc，在相应数据前添加 stream
	ListValue(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error)
}

type streamServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServerClient(cc grpc.ClientConnInterface) StreamServerClient {
	return &streamServerClient{cc}
}

func (c *streamServerClient) Route(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, StreamServer_Route_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServerClient) ListValue(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamServer_ServiceDesc.Streams[0], StreamServer_ListValue_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SimpleRequest, StreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamServer_ListValueClient = grpc.ServerStreamingClient[StreamResponse]

// StreamServerServer is the server API for StreamServer service.
// All implementations must embed UnimplementedStreamServerServer
// for forward compatibility.
//
// 定义服务方法
// 服务端流式 RPC，只要在响应数据前添加 stream 即可
type StreamServerServer interface {
	Route(context.Context, *SimpleRequest) (*SimpleResponse, error)
	// 服务端流式 rpc，在相应数据前添加 stream
	ListValue(*SimpleRequest, grpc.ServerStreamingServer[StreamResponse]) error
	mustEmbedUnimplementedStreamServerServer()
}

// UnimplementedStreamServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamServerServer struct{}

func (UnimplementedStreamServerServer) Route(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (UnimplementedStreamServerServer) ListValue(*SimpleRequest, grpc.ServerStreamingServer[StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ListValue not implemented")
}
func (UnimplementedStreamServerServer) mustEmbedUnimplementedStreamServerServer() {}
func (UnimplementedStreamServerServer) testEmbeddedByValue()                      {}

// UnsafeStreamServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServerServer will
// result in compilation errors.
type UnsafeStreamServerServer interface {
	mustEmbedUnimplementedStreamServerServer()
}

func RegisterStreamServerServer(s grpc.ServiceRegistrar, srv StreamServerServer) {
	// If the following call pancis, it indicates UnimplementedStreamServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamServer_ServiceDesc, srv)
}

func _StreamServer_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamServer_Route_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).Route(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamServer_ListValue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SimpleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServerServer).ListValue(m, &grpc.GenericServerStream[SimpleRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamServer_ListValueServer = grpc.ServerStreamingServer[StreamResponse]

// StreamServer_ServiceDesc is the grpc.ServiceDesc for StreamServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamServer",
	HandlerType: (*StreamServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Route",
			Handler:    _StreamServer_Route_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListValue",
			Handler:       _StreamServer_ListValue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server_stream.proto",
}
